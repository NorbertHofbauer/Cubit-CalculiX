#!cubit
reset

#import stl "/home/user/cubit/3d_print/Ork_Veteran.stl" feature_angle 135.00 merge 
#import stl "/home/user/cubit/3d_print/Minotaur.stl" feature_angle 135.00 merge
#import stl "/home/user/cubit/3d_print/Skull_Rose_-_Paintbrush_Holder-Serev3D.stl" feature_angle 135.00 merge
#import stl "/home/user/cubit/3d_print/goku_w_base.stl" feature_angle 135.00 merge
#import acis "/home/user/cubit/3d_print/knuckle.sat" nofreesurfaces heal attributes_on  separate_bodies 
#Volume 1  rotate 90 about x 

create frustum height 80 radius 20 top 0
move volume 1 z -20
Volume 1  copy rotate 180 about x 
unite volume 1 2 
compress

#!python
layers = 50
mesh_size = 2.5

# volume id for imported stl
vid = 1

# bounding box volume ids and blocks
cube_vids = []

vector_list = cubit.get_bounding_box("volume" , vid)
cubit.cmd(f"move volume {vid} x {-vector_list[0]} y {-vector_list[3]} z {-vector_list[6]}")
cubit.cmd(f"view bottom")

# from https://forum.coreform.com/t/python-showcase-find-hexes-whose-centroids-are-inside-a-body/1265
import time

def list_to_str(input_val):
  return " ".join([str(val) for val in input_val])

def boundary_cube(volume_id,size,number_of_layers):
  #cubit.cmd(f"create brick bounding box Volume {volume_id} tight")
  bb_list = cubit.get_bounding_box("volume" , volume_id)
  cubit.cmd(f"create brick x {bb_list[2]} y {bb_list[5]} z {bb_list[8]}")
  cubit.cmd(f"move volume {cubit.get_last_id('volume')} x {bb_list[2]/2} y {bb_list[5]/2} z {bb_list[8]/2}")
  #cut into layers
  bb_vid =  cubit.get_last_id('volume')
  for i in range(number_of_layers):
   if i!=0:
    cubit.cmd(f"webcut volume {bb_vid} with plane zplane offset {bb_list[8]/(number_of_layers)*i}")
    cube_vids.append(cubit.get_last_id('volume'))
   if i==number_of_layers-1:
    cube_vids.append(bb_vid)
  #cubit.cmd(f"merge vol {' '.join(str(id) for id in cube_vids)}")

  for i in range(len(cube_vids)):
   cubit.cmd(f"Volume {cube_vids[i]} size {size}")
   cubit.cmd(f"mesh Volume {cube_vids[i]}")
   #if refine_level > 0:
   #  cubit.cmd(f'refine hex all numsplit {refine_level} bias 1.0 depth 1 ')
  #cubit.cmd("compress")

def create_nodal_coordinates_array():
  nCoord = []
  node_ids = cubit.get_entities("node")
  for id in node_ids:
    nCoord.append(cubit.get_nodal_coordinates(id))
  return nCoord

def get_hex_centroid(hex_id, global_node_coords):
  hex_nodes = cubit.get_connectivity("hex", hex_id)
  cx=cy=cz=0
  count = 0
  for node_id in hex_nodes:
    cx += global_node_coords[node_id-1][0]
    cy += global_node_coords[node_id-1][1]
    cz += global_node_coords[node_id-1][2]
    count += 1
  cx = cx/count
  cy = cy/count
  cz = cz/count
  return cx, cy, cz

def vol_hexes_in_body(source_volume_id, target_body_id, block_id):
  BODY = cubit.body(target_body_id)
  vol_hexes = cubit.get_volume_hexes(source_volume_id)
  block_hexes = []
  nCoord = create_nodal_coordinates_array()
  for hex_id in vol_hexes:
    cx, cy, cz = get_hex_centroid(hex_id, nCoord)   
    if BODY.point_containment([cx, cy, cz]):
      block_hexes.append(hex_id)
  if len(block_hexes)>0:
   cubit.silent_cmd(f"block {block_id} hex {list_to_str(block_hexes)}")

def create_vol_from_hexes():
  block_ids = cubit.parse_cubit_list("block","all")
  for bid in block_ids:
   t0 = time.perf_counter()
   block_hexes = cubit.parse_cubit_list("hex",f"all in block {bid}")
   for i in range(len(block_hexes)):
    cubit.silent_cmd(f"create brick bounding box hex {block_hexes[i]} tight")
    new_vid = cubit.get_last_id('volume')
    cubit.silent_cmd(f"block {bid} add volume {new_vid}")
    cubit.silent_cmd(f"block {bid} name 'layer_{bid}'")
   status = cubit.silent_cmd(f"block {bid} remove hex all")
   t1 = time.perf_counter()
   print(f"Time to create volumes for hexes in block {bid}: {t1 - t0} seconds")

def create_sidesets_from_blocks():
  block_ids = cubit.parse_cubit_list("block","all")
  for bid in block_ids:
   t0 = time.perf_counter()
   block_volumes = cubit.parse_cubit_list("volume",f"all in block {bid}")
   if len(block_volumes)>0:
    bb_list = cubit.get_total_bounding_box("volume" , block_volumes)
    #bottom
    status = cubit.silent_cmd(f"sideset {cubit.get_sideset_count()+1} add surface all in volume all in block {bid} with z_coord>={bb_list[6]-1e-6} and z_coord<={bb_list[6]+1e-6}")
    status = cubit.silent_cmd(f"sideset {cubit.get_sideset_count()} name 'layer_{bid}_bottom'")
    #middle
    block_surfaces = cubit.parse_cubit_list("surface",f"all in volume all in block {bid} with z_coord>{bb_list[6]} and z_coord<{bb_list[7]}")
    block_surfaces_not_merged = []
    for sid in block_surfaces:
     if not cubit.is_merged("surface",sid):
      block_surfaces_not_merged.append(sid)
    status = cubit.silent_cmd(f"sideset {cubit.get_sideset_count()+1} add surface {list_to_str(block_surfaces_not_merged)}")
    status = cubit.silent_cmd(f"sideset {cubit.get_sideset_count()} name 'layer_{bid}_middle'")
    #bottom
    status = cubit.silent_cmd(f"sideset {cubit.get_sideset_count()+1} add surface all in volume all in block {bid} with z_coord>={bb_list[7]-1e-6} and z_coord<={bb_list[7]+1e-6}")
    status = cubit.silent_cmd(f"sideset {cubit.get_sideset_count()} name 'layer_{bid}_top'")
   t1 = time.perf_counter()
   print(f"Time to create sidesets for block {bid}: {t1 - t0} seconds")


## Script body
boundary_cube(vid,mesh_size,layers)

for i in range(len(cube_vids)):
 t0 = time.perf_counter()
 vol_hexes_in_body(cube_vids[i], vid, i+1)
 t1 = time.perf_counter()
 print(f"Time to search for hexes in layer {i+1}: {t1 - t0} seconds")

cubit.cmd(f"graphics off")
create_vol_from_hexes()
cubit.silent_cmd(f"delete volume {list_to_str(cube_vids)}")

block_ids = cubit.parse_cubit_list("block","all")
for i in range(len(block_ids)-1):
 print(f"merge volumes in blocks {block_ids[i]} and {block_ids[i+1]}")
 status = cubit.cmd(f"merge surface all in vol all in block {block_ids[i+1]} {block_ids[i]}")

for i in range(len(block_ids)):
 print(f"mesh volumes in block {block_ids[i]}") 
 status = cubit.silent_cmd(f"vol all in block {block_ids[i]} size {mesh_size}")
 status = cubit.silent_cmd(f"vol all in block {block_ids[i]} scheme map")
 status = cubit.cmd(f"mesh vol all in block {block_ids[i]}")
print("finished preparing layers")
print("updating gui")
cubit.cmd(f"graphics on")

## creating sidesets for blocks
create_sidesets_from_blocks()

#!cubit
#draw vol all in block all
draw block all
#draw vol 1 add

#material
create material "solid" property_group "CalculiX-FEA"
modify material "solid" scalar_properties "CCX_ELASTIC_ISO_USE_CARD" 1
modify material "solid" scalar_properties "CCX_PLASTIC_ISO_USE_CARD" 1
modify material "solid" scalar_properties "CCX_DENSITY_USE_CARD" 1
modify material "solid" matrix_property "CCX_DENSITY_DENSITY" 1.1 0
modify material "solid" scalar_properties "CCX_SPECIFIC_HEAT_USE_CARD" 1
modify material "solid" matrix_property "CCX_SPECIFIC_HEAT_SPECIFIC_HEAT" 2.13 0
modify material "solid" scalar_properties "CCX_EXPANSION_ISO_USE_CARD" 1
modify material "solid" scalar_properties "CCX_CONDUCTIVITY_USE_CARD" 1
modify material "solid" scalar_properties "CCX_CONDUCTIVITY_ISO_USE_CARD" 1
modify material "solid" matrix_property "CCX_CONDUCTIVITY_ISO_K_TEMPERATURE" 0.18 0
modify material "solid" scalar_properties "CCX_ELASTIC_USE_CARD" 1
modify material "solid" matrix_property "CCX_ELASTIC_ISO_MODULUS_VS_POISSON_VS_TEMPERATURE" 210000 0.3 0

#section
ccx create section solid block all material 1

# field outputs
ccx create fieldoutput name "fo_node" node
ccx modify fieldoutput 1 node frequency 1
ccx modify fieldoutput 1 node key_on NT
ccx modify fieldoutput 1 node key_off CP U DEPF DEPT DTF HCRI KEQ MACH MAXU MF PNT POT PRF PS PSF PT PTF PU RF RFL SEN TS TSF TT TTF TURB V VF
ccx create fieldoutput name "fo_element" element
ccx modify fieldoutput 2 element frequency 1
ccx modify fieldoutput 2 element key_on HFL
ccx modify fieldoutput 2 element key_off CEEQ S E ECD EMFB EMFE ENER ERR HER HFLF MAXE MAXS ME PEEQ PHS SF SMID SNEG SPOS SVF SDV THE ZZS

# initial conditions
create temperature on volume all value 240
ccx modify temperature 1 op new
ccx create initialcondition temperature
ccx modify initialcondition 1 temperature bc_id 1

#!python
block_ids = cubit.parse_cubit_list("block","all")
for i in range(len(block_ids)):
  status = cubit.cmd(f"ccx create film sideset {(i+1)*3-1} temperature 20 coefficient 0.025 name 'layer_{block_ids[i]}'")
  status = cubit.cmd(f"create temperature on volume all in block {block_ids[i]} value 240")
  status = cubit.cmd(f"ccx modify temperature {i+2} op new")

#!python
#create dummy steps
status = cubit.cmd("ccx create step name 'dummy_step' heattransfer")
status = cubit.cmd("ccx step 1 add fieldoutput 1 2")
status = cubit.cmd("ccx step 1 add bc temperature 1")
#status = cubit.cmd("ccx create step name 'add_layer_{block_ids[0]}' static")
status = cubit.cmd("ccx create step name 'add_layer_1' heattransfer")
status = cubit.cmd(f"ccx modify step 2 parameter inc 100000")  
status = cubit.cmd(f"ccx modify step 2 heattransfer initialtimeincrement 10 timeperiodofstep 10 minimumtimeincrement 1e-5 maximumtimeincrement 10")
status = cubit.cmd(f"ccx step 2 add bc temperature 2")
status = cubit.cmd("ccx step 2 add fieldoutput 1 2")
status = cubit.cmd("ccx create customline name 'step_2_top' after step_begin item_id 2 cline '*MODEL CHANGE,TYPE=ELEMENT,REMOVE'")
block_ids = cubit.parse_cubit_list("block","all")
for i in range(len(block_ids)):
 if i > 0:
  status = cubit.cmd(f"ccx create customline name 'remove_layer_{block_ids[i]}' after step_begin item_id 2 cline 'layer_{block_ids[i]}'")
status = cubit.cmd(f"ccx create step name 'cool_layer_{block_ids[0]}' heattransfer")
status = cubit.cmd(f"ccx modify step 3 parameter inc 100000")  
status = cubit.cmd(f"ccx modify step 3 heattransfer initialtimeincrement 10 timeperiodofstep 20 minimumtimeincrement 1e-5 maximumtimeincrement 10")
status = cubit.cmd(f"ccx step 3 add load film 1")
status = cubit.cmd(f"ccx step 3 add fieldoutput 1 2")

#create a step for every layer
cs = 3
for i in range(len(block_ids)):
# if i > 0 and i < 2:
 if i > 0:
  cs = cs + 1
  status = cubit.cmd(f"ccx create step name 'add_layer_{block_ids[i]}' heattransfer")
  status = cubit.cmd(f"ccx modify step {cs} heattransfer initialtimeincrement 10 timeperiodofstep 10 minimumtimeincrement 1e-5 maximumtimeincrement 10")
  status = cubit.cmd(f"ccx modify step {cs} parameter inc 100000")  
  status = cubit.cmd(f"ccx step {cs} add load film {i+1}")
  status = cubit.cmd(f"ccx step {cs} add bc temperature {i+2}")
  status = cubit.cmd(f"ccx step {cs} add fieldoutput 1 2")
  status = cubit.cmd(f"ccx create customline name 'step_{cs}_top' after step_begin item_id {cs} cline '*MODEL CHANGE,TYPE=ELEMENT,ADD'")
  status = cubit.cmd(f"ccx create customline name 'add_layer_{block_ids[i]}' after step_begin item_id {cs} cline 'layer_{block_ids[i]}'")
  cs = cs + 1
  status = cubit.cmd(f"ccx create step name 'cool_layer_{block_ids[i]}' heattransfer")
  status = cubit.cmd(f"ccx modify step {cs} parameter inc 100000")
  if i == len(block_ids)-1:
   status = cubit.cmd(f"ccx modify step {cs} heattransfer initialtimeincrement 10 timeperiodofstep 250 minimumtimeincrement 1e-5 maximumtimeincrement 10")
   status = cubit.cmd(f"ccx create customline name 'remove_temp_bc' after step_begin item_id {cs} cline '*BOUNDARY,OP=NEW'")
  else:
   status = cubit.cmd(f"ccx modify step {cs} heattransfer initialtimeincrement 10 timeperiodofstep 20 minimumtimeincrement 1e-5 maximumtimeincrement 10")
  status = cubit.cmd(f"ccx step {cs} add load film {i+1}")
  status = cubit.cmd(f"ccx step {cs} add fieldoutput 1 2")

cubit.cmd("ccx create job name 'model_change'")

#!cubit
delete volume 1
ccx run job 1 no_conversion
draw block all
ccx wait job 1
ccx result convert job 1 partial

#!python
print("ccx run job 1 no_conversion")
command = ("ccx result convert job 1 block ")
for bid in block_ids:
 command = command + str(bid) + " "
command = command + " partial"
cubit.cmd(command)
#!cubit
