# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _calculix_pythoninterface
else:
    import _calculix_pythoninterface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _calculix_pythoninterface.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _calculix_pythoninterface.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _calculix_pythoninterface.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _calculix_pythoninterface.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _calculix_pythoninterface.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _calculix_pythoninterface.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _calculix_pythoninterface.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _calculix_pythoninterface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _calculix_pythoninterface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _calculix_pythoninterface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _calculix_pythoninterface.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _calculix_pythoninterface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _calculix_pythoninterface:
_calculix_pythoninterface.SwigPyIterator_swigregister(SwigPyIterator)

class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vectori___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vectori___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _calculix_pythoninterface.vectori___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _calculix_pythoninterface.vectori___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vectori___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _calculix_pythoninterface.vectori___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectori___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _calculix_pythoninterface.vectori___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectori___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _calculix_pythoninterface.vectori_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectori_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vectori_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _calculix_pythoninterface.vectori_size(self)

    def swap(self, v: "vectori") -> "void":
        return _calculix_pythoninterface.vectori_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _calculix_pythoninterface.vectori_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _calculix_pythoninterface.vectori_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _calculix_pythoninterface.vectori_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _calculix_pythoninterface.vectori_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vectori_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _calculix_pythoninterface.vectori_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vectori_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _calculix_pythoninterface.vectori_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectori_swiginit(self, _calculix_pythoninterface.new_vectori(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectori_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _calculix_pythoninterface.vectori_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _calculix_pythoninterface.vectori_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectori_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vectori_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vectori_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _calculix_pythoninterface.vectori_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _calculix_pythoninterface.vectori_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectori

# Register vectori in _calculix_pythoninterface:
_calculix_pythoninterface.vectori_swigregister(vectori)

class vector2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector2i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector2i___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector2i___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _calculix_pythoninterface.vector2i___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _calculix_pythoninterface.vector2i___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2i___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector2i___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2i___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _calculix_pythoninterface.vector2i___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2i___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _calculix_pythoninterface.vector2i_pop(self)

    def append(self, x: "vectori") -> "void":
        return _calculix_pythoninterface.vector2i_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector2i_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _calculix_pythoninterface.vector2i_size(self)

    def swap(self, v: "vector2i") -> "void":
        return _calculix_pythoninterface.vector2i_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _calculix_pythoninterface.vector2i_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _calculix_pythoninterface.vector2i_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _calculix_pythoninterface.vector2i_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _calculix_pythoninterface.vector2i_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector2i_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _calculix_pythoninterface.vector2i_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector2i_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _calculix_pythoninterface.vector2i_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector2i_swiginit(self, _calculix_pythoninterface.new_vector2i(*args))

    def push_back(self, x: "vectori") -> "void":
        return _calculix_pythoninterface.vector2i_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _calculix_pythoninterface.vector2i_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _calculix_pythoninterface.vector2i_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "vectori") -> "void":
        return _calculix_pythoninterface.vector2i_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector2i_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector2i_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _calculix_pythoninterface.vector2i_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _calculix_pythoninterface.vector2i_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector2i

# Register vector2i in _calculix_pythoninterface:
_calculix_pythoninterface.vector2i_swigregister(vector2i)

class vector3i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector3i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector3i___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector3i___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< int > > >::size_type":
        return _calculix_pythoninterface.vector3i___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< int > > >::difference_type", j: "std::vector< std::vector< std::vector< int > > >::difference_type") -> "std::vector< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >,std::allocator< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > > *":
        return _calculix_pythoninterface.vector3i___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3i___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< int > > >::difference_type", j: "std::vector< std::vector< std::vector< int > > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector3i___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3i___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< int > > >::value_type const &":
        return _calculix_pythoninterface.vector3i___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3i___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< int > > >::value_type":
        return _calculix_pythoninterface.vector3i_pop(self)

    def append(self, x: "vector2i") -> "void":
        return _calculix_pythoninterface.vector3i_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector3i_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< int > > >::size_type":
        return _calculix_pythoninterface.vector3i_size(self)

    def swap(self, v: "vector3i") -> "void":
        return _calculix_pythoninterface.vector3i_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< int > > >::iterator":
        return _calculix_pythoninterface.vector3i_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< int > > >::iterator":
        return _calculix_pythoninterface.vector3i_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< int > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3i_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< int > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3i_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector3i_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< int > > >::allocator_type":
        return _calculix_pythoninterface.vector3i_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector3i_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< int > > >::iterator":
        return _calculix_pythoninterface.vector3i_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector3i_swiginit(self, _calculix_pythoninterface.new_vector3i(*args))

    def push_back(self, x: "vector2i") -> "void":
        return _calculix_pythoninterface.vector3i_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< int > > >::value_type const &":
        return _calculix_pythoninterface.vector3i_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< int > > >::value_type const &":
        return _calculix_pythoninterface.vector3i_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< int > > >::size_type", x: "vector2i") -> "void":
        return _calculix_pythoninterface.vector3i_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector3i_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector3i_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< int > > >::size_type") -> "void":
        return _calculix_pythoninterface.vector3i_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< int > > >::size_type":
        return _calculix_pythoninterface.vector3i_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector3i

# Register vector3i in _calculix_pythoninterface:
_calculix_pythoninterface.vector3i_swigregister(vector3i)

class vectorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vectorf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vectorf___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vectorf___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _calculix_pythoninterface.vectorf___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _calculix_pythoninterface.vectorf___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vectorf___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _calculix_pythoninterface.vectorf___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectorf___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _calculix_pythoninterface.vectorf___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectorf___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _calculix_pythoninterface.vectorf_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectorf_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vectorf_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _calculix_pythoninterface.vectorf_size(self)

    def swap(self, v: "vectorf") -> "void":
        return _calculix_pythoninterface.vectorf_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _calculix_pythoninterface.vectorf_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _calculix_pythoninterface.vectorf_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _calculix_pythoninterface.vectorf_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _calculix_pythoninterface.vectorf_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vectorf_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _calculix_pythoninterface.vectorf_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vectorf_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _calculix_pythoninterface.vectorf_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectorf_swiginit(self, _calculix_pythoninterface.new_vectorf(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectorf_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _calculix_pythoninterface.vectorf_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _calculix_pythoninterface.vectorf_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectorf_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vectorf_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vectorf_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _calculix_pythoninterface.vectorf_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _calculix_pythoninterface.vectorf_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectorf

# Register vectorf in _calculix_pythoninterface:
_calculix_pythoninterface.vectorf_swigregister(vectorf)

class vector2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector2f_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector2f___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector2f___bool__(self)

    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        return _calculix_pythoninterface.vector2f___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        return _calculix_pythoninterface.vector2f___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2f___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector2f___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2f___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        return _calculix_pythoninterface.vector2f___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2f___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        return _calculix_pythoninterface.vector2f_pop(self)

    def append(self, x: "vectorf") -> "void":
        return _calculix_pythoninterface.vector2f_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector2f_empty(self)

    def size(self) -> "std::vector< std::vector< float > >::size_type":
        return _calculix_pythoninterface.vector2f_size(self)

    def swap(self, v: "vector2f") -> "void":
        return _calculix_pythoninterface.vector2f_swap(self, v)

    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        return _calculix_pythoninterface.vector2f_begin(self)

    def end(self) -> "std::vector< std::vector< float > >::iterator":
        return _calculix_pythoninterface.vector2f_end(self)

    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _calculix_pythoninterface.vector2f_rbegin(self)

    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _calculix_pythoninterface.vector2f_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector2f_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        return _calculix_pythoninterface.vector2f_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector2f_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        return _calculix_pythoninterface.vector2f_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector2f_swiginit(self, _calculix_pythoninterface.new_vector2f(*args))

    def push_back(self, x: "vectorf") -> "void":
        return _calculix_pythoninterface.vector2f_push_back(self, x)

    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _calculix_pythoninterface.vector2f_front(self)

    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _calculix_pythoninterface.vector2f_back(self)

    def assign(self, n: "std::vector< std::vector< float > >::size_type", x: "vectorf") -> "void":
        return _calculix_pythoninterface.vector2f_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector2f_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector2f_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< float > >::size_type") -> "void":
        return _calculix_pythoninterface.vector2f_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        return _calculix_pythoninterface.vector2f_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector2f

# Register vector2f in _calculix_pythoninterface:
_calculix_pythoninterface.vector2f_swigregister(vector2f)

class vector3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector3f_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector3f___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector3f___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _calculix_pythoninterface.vector3f___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< float > > >::difference_type", j: "std::vector< std::vector< std::vector< float > > >::difference_type") -> "std::vector< std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >,std::allocator< std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > > > *":
        return _calculix_pythoninterface.vector3f___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3f___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< float > > >::difference_type", j: "std::vector< std::vector< std::vector< float > > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector3f___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3f___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _calculix_pythoninterface.vector3f___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3f___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< float > > >::value_type":
        return _calculix_pythoninterface.vector3f_pop(self)

    def append(self, x: "vector2f") -> "void":
        return _calculix_pythoninterface.vector3f_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector3f_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _calculix_pythoninterface.vector3f_size(self)

    def swap(self, v: "vector3f") -> "void":
        return _calculix_pythoninterface.vector3f_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _calculix_pythoninterface.vector3f_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _calculix_pythoninterface.vector3f_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< float > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3f_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< float > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3f_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector3f_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< float > > >::allocator_type":
        return _calculix_pythoninterface.vector3f_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector3f_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _calculix_pythoninterface.vector3f_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector3f_swiginit(self, _calculix_pythoninterface.new_vector3f(*args))

    def push_back(self, x: "vector2f") -> "void":
        return _calculix_pythoninterface.vector3f_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _calculix_pythoninterface.vector3f_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _calculix_pythoninterface.vector3f_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< float > > >::size_type", x: "vector2f") -> "void":
        return _calculix_pythoninterface.vector3f_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector3f_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector3f_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< float > > >::size_type") -> "void":
        return _calculix_pythoninterface.vector3f_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _calculix_pythoninterface.vector3f_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector3f

# Register vector3f in _calculix_pythoninterface:
_calculix_pythoninterface.vector3f_swigregister(vector3f)

class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vectord___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vectord___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _calculix_pythoninterface.vectord___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _calculix_pythoninterface.vectord___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vectord___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _calculix_pythoninterface.vectord___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectord___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _calculix_pythoninterface.vectord___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectord___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _calculix_pythoninterface.vectord_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectord_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vectord_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _calculix_pythoninterface.vectord_size(self)

    def swap(self, v: "vectord") -> "void":
        return _calculix_pythoninterface.vectord_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _calculix_pythoninterface.vectord_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _calculix_pythoninterface.vectord_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _calculix_pythoninterface.vectord_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _calculix_pythoninterface.vectord_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vectord_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _calculix_pythoninterface.vectord_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vectord_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _calculix_pythoninterface.vectord_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectord_swiginit(self, _calculix_pythoninterface.new_vectord(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectord_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _calculix_pythoninterface.vectord_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _calculix_pythoninterface.vectord_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectord_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vectord_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vectord_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _calculix_pythoninterface.vectord_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _calculix_pythoninterface.vectord_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectord

# Register vectord in _calculix_pythoninterface:
_calculix_pythoninterface.vectord_swigregister(vectord)

class vector2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector2d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector2d___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _calculix_pythoninterface.vector2d___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _calculix_pythoninterface.vector2d___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2d___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector2d___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2d___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _calculix_pythoninterface.vector2d___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2d___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _calculix_pythoninterface.vector2d_pop(self)

    def append(self, x: "vectord") -> "void":
        return _calculix_pythoninterface.vector2d_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector2d_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _calculix_pythoninterface.vector2d_size(self)

    def swap(self, v: "vector2d") -> "void":
        return _calculix_pythoninterface.vector2d_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _calculix_pythoninterface.vector2d_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _calculix_pythoninterface.vector2d_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _calculix_pythoninterface.vector2d_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _calculix_pythoninterface.vector2d_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector2d_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _calculix_pythoninterface.vector2d_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector2d_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _calculix_pythoninterface.vector2d_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector2d_swiginit(self, _calculix_pythoninterface.new_vector2d(*args))

    def push_back(self, x: "vectord") -> "void":
        return _calculix_pythoninterface.vector2d_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _calculix_pythoninterface.vector2d_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _calculix_pythoninterface.vector2d_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "vectord") -> "void":
        return _calculix_pythoninterface.vector2d_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector2d_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector2d_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _calculix_pythoninterface.vector2d_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _calculix_pythoninterface.vector2d_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector2d

# Register vector2d in _calculix_pythoninterface:
_calculix_pythoninterface.vector2d_swigregister(vector2d)

class vector3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector3d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector3d___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _calculix_pythoninterface.vector3d___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< double > > >::difference_type", j: "std::vector< std::vector< std::vector< double > > >::difference_type") -> "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *":
        return _calculix_pythoninterface.vector3d___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3d___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< double > > >::difference_type", j: "std::vector< std::vector< std::vector< double > > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector3d___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3d___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _calculix_pythoninterface.vector3d___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3d___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< double > > >::value_type":
        return _calculix_pythoninterface.vector3d_pop(self)

    def append(self, x: "vector2d") -> "void":
        return _calculix_pythoninterface.vector3d_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector3d_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _calculix_pythoninterface.vector3d_size(self)

    def swap(self, v: "vector3d") -> "void":
        return _calculix_pythoninterface.vector3d_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _calculix_pythoninterface.vector3d_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _calculix_pythoninterface.vector3d_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< double > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3d_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< double > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3d_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector3d_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< double > > >::allocator_type":
        return _calculix_pythoninterface.vector3d_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector3d_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _calculix_pythoninterface.vector3d_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector3d_swiginit(self, _calculix_pythoninterface.new_vector3d(*args))

    def push_back(self, x: "vector2d") -> "void":
        return _calculix_pythoninterface.vector3d_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _calculix_pythoninterface.vector3d_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _calculix_pythoninterface.vector3d_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< double > > >::size_type", x: "vector2d") -> "void":
        return _calculix_pythoninterface.vector3d_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector3d_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector3d_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< double > > >::size_type") -> "void":
        return _calculix_pythoninterface.vector3d_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _calculix_pythoninterface.vector3d_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector3d

# Register vector3d in _calculix_pythoninterface:
_calculix_pythoninterface.vector3d_swigregister(vector3d)

class vectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vectors___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vectors___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _calculix_pythoninterface.vectors___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _calculix_pythoninterface.vectors___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vectors___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _calculix_pythoninterface.vectors___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectors___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _calculix_pythoninterface.vectors___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vectors___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _calculix_pythoninterface.vectors_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectors_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vectors_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _calculix_pythoninterface.vectors_size(self)

    def swap(self, v: "vectors") -> "void":
        return _calculix_pythoninterface.vectors_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _calculix_pythoninterface.vectors_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _calculix_pythoninterface.vectors_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _calculix_pythoninterface.vectors_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _calculix_pythoninterface.vectors_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vectors_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _calculix_pythoninterface.vectors_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vectors_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _calculix_pythoninterface.vectors_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vectors_swiginit(self, _calculix_pythoninterface.new_vectors(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectors_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _calculix_pythoninterface.vectors_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _calculix_pythoninterface.vectors_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _calculix_pythoninterface.vectors_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vectors_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vectors_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _calculix_pythoninterface.vectors_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _calculix_pythoninterface.vectors_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vectors

# Register vectors in _calculix_pythoninterface:
_calculix_pythoninterface.vectors_swigregister(vectors)

class vector2s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector2s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector2s___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector2s___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _calculix_pythoninterface.vector2s___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *":
        return _calculix_pythoninterface.vector2s___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2s___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector2s___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2s___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _calculix_pythoninterface.vector2s___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector2s___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::string > >::value_type":
        return _calculix_pythoninterface.vector2s_pop(self)

    def append(self, x: "vectors") -> "void":
        return _calculix_pythoninterface.vector2s_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector2s_empty(self)

    def size(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _calculix_pythoninterface.vector2s_size(self)

    def swap(self, v: "vector2s") -> "void":
        return _calculix_pythoninterface.vector2s_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _calculix_pythoninterface.vector2s_begin(self)

    def end(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _calculix_pythoninterface.vector2s_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _calculix_pythoninterface.vector2s_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _calculix_pythoninterface.vector2s_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector2s_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::string > >::allocator_type":
        return _calculix_pythoninterface.vector2s_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector2s_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::string > >::iterator":
        return _calculix_pythoninterface.vector2s_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector2s_swiginit(self, _calculix_pythoninterface.new_vector2s(*args))

    def push_back(self, x: "vectors") -> "void":
        return _calculix_pythoninterface.vector2s_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _calculix_pythoninterface.vector2s_front(self)

    def back(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _calculix_pythoninterface.vector2s_back(self)

    def assign(self, n: "std::vector< std::vector< std::string > >::size_type", x: "vectors") -> "void":
        return _calculix_pythoninterface.vector2s_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector2s_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector2s_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::string > >::size_type") -> "void":
        return _calculix_pythoninterface.vector2s_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _calculix_pythoninterface.vector2s_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector2s

# Register vector2s in _calculix_pythoninterface:
_calculix_pythoninterface.vector2s_swigregister(vector2s)

class vector3s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.vector3s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.vector3s___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.vector3s___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< std::string > > >::size_type":
        return _calculix_pythoninterface.vector3s___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< std::string > > >::difference_type", j: "std::vector< std::vector< std::vector< std::string > > >::difference_type") -> "std::vector< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >,std::allocator< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > > > *":
        return _calculix_pythoninterface.vector3s___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3s___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< std::string > > >::difference_type", j: "std::vector< std::vector< std::vector< std::string > > >::difference_type") -> "void":
        return _calculix_pythoninterface.vector3s___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3s___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< std::string > > >::value_type const &":
        return _calculix_pythoninterface.vector3s___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.vector3s___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< std::string > > >::value_type":
        return _calculix_pythoninterface.vector3s_pop(self)

    def append(self, x: "vector2s") -> "void":
        return _calculix_pythoninterface.vector3s_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.vector3s_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< std::string > > >::size_type":
        return _calculix_pythoninterface.vector3s_size(self)

    def swap(self, v: "vector3s") -> "void":
        return _calculix_pythoninterface.vector3s_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< std::string > > >::iterator":
        return _calculix_pythoninterface.vector3s_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< std::string > > >::iterator":
        return _calculix_pythoninterface.vector3s_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< std::string > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3s_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< std::string > > >::reverse_iterator":
        return _calculix_pythoninterface.vector3s_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.vector3s_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< std::string > > >::allocator_type":
        return _calculix_pythoninterface.vector3s_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.vector3s_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< std::string > > >::iterator":
        return _calculix_pythoninterface.vector3s_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.vector3s_swiginit(self, _calculix_pythoninterface.new_vector3s(*args))

    def push_back(self, x: "vector2s") -> "void":
        return _calculix_pythoninterface.vector3s_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< std::string > > >::value_type const &":
        return _calculix_pythoninterface.vector3s_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< std::string > > >::value_type const &":
        return _calculix_pythoninterface.vector3s_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< std::string > > >::size_type", x: "vector2s") -> "void":
        return _calculix_pythoninterface.vector3s_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.vector3s_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.vector3s_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< std::string > > >::size_type") -> "void":
        return _calculix_pythoninterface.vector3s_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< std::string > > >::size_type":
        return _calculix_pythoninterface.vector3s_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_vector3s

# Register vector3s in _calculix_pythoninterface:
_calculix_pythoninterface.vector3s_swigregister(vector3s)

class pairi_i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _calculix_pythoninterface.pairi_i_swiginit(self, _calculix_pythoninterface.new_pairi_i(*args))
    first = property(_calculix_pythoninterface.pairi_i_first_get, _calculix_pythoninterface.pairi_i_first_set)
    second = property(_calculix_pythoninterface.pairi_i_second_get, _calculix_pythoninterface.pairi_i_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _calculix_pythoninterface.delete_pairi_i

# Register pairi_i in _calculix_pythoninterface:
_calculix_pythoninterface.pairi_i_swigregister(pairi_i)

class VectorPairi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _calculix_pythoninterface.VectorPairi_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _calculix_pythoninterface.VectorPairi___nonzero__(self)

    def __bool__(self) -> "bool":
        return _calculix_pythoninterface.VectorPairi___bool__(self)

    def __len__(self) -> "std::vector< std::pair< int,int > >::size_type":
        return _calculix_pythoninterface.VectorPairi___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< int,int > >::difference_type", j: "std::vector< std::pair< int,int > >::difference_type") -> "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *":
        return _calculix_pythoninterface.VectorPairi___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _calculix_pythoninterface.VectorPairi___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< int,int > >::difference_type", j: "std::vector< std::pair< int,int > >::difference_type") -> "void":
        return _calculix_pythoninterface.VectorPairi___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _calculix_pythoninterface.VectorPairi___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< int,int > >::value_type const &":
        return _calculix_pythoninterface.VectorPairi___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _calculix_pythoninterface.VectorPairi___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< int,int > >::value_type":
        return _calculix_pythoninterface.VectorPairi_pop(self)

    def append(self, x: "pairi_i") -> "void":
        return _calculix_pythoninterface.VectorPairi_append(self, x)

    def empty(self) -> "bool":
        return _calculix_pythoninterface.VectorPairi_empty(self)

    def size(self) -> "std::vector< std::pair< int,int > >::size_type":
        return _calculix_pythoninterface.VectorPairi_size(self)

    def swap(self, v: "VectorPairi") -> "void":
        return _calculix_pythoninterface.VectorPairi_swap(self, v)

    def begin(self) -> "std::vector< std::pair< int,int > >::iterator":
        return _calculix_pythoninterface.VectorPairi_begin(self)

    def end(self) -> "std::vector< std::pair< int,int > >::iterator":
        return _calculix_pythoninterface.VectorPairi_end(self)

    def rbegin(self) -> "std::vector< std::pair< int,int > >::reverse_iterator":
        return _calculix_pythoninterface.VectorPairi_rbegin(self)

    def rend(self) -> "std::vector< std::pair< int,int > >::reverse_iterator":
        return _calculix_pythoninterface.VectorPairi_rend(self)

    def clear(self) -> "void":
        return _calculix_pythoninterface.VectorPairi_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< int,int > >::allocator_type":
        return _calculix_pythoninterface.VectorPairi_get_allocator(self)

    def pop_back(self) -> "void":
        return _calculix_pythoninterface.VectorPairi_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< int,int > >::iterator":
        return _calculix_pythoninterface.VectorPairi_erase(self, *args)

    def __init__(self, *args):
        _calculix_pythoninterface.VectorPairi_swiginit(self, _calculix_pythoninterface.new_VectorPairi(*args))

    def push_back(self, x: "pairi_i") -> "void":
        return _calculix_pythoninterface.VectorPairi_push_back(self, x)

    def front(self) -> "std::vector< std::pair< int,int > >::value_type const &":
        return _calculix_pythoninterface.VectorPairi_front(self)

    def back(self) -> "std::vector< std::pair< int,int > >::value_type const &":
        return _calculix_pythoninterface.VectorPairi_back(self)

    def assign(self, n: "std::vector< std::pair< int,int > >::size_type", x: "pairi_i") -> "void":
        return _calculix_pythoninterface.VectorPairi_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _calculix_pythoninterface.VectorPairi_resize(self, *args)

    def insert(self, *args) -> "void":
        return _calculix_pythoninterface.VectorPairi_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< int,int > >::size_type") -> "void":
        return _calculix_pythoninterface.VectorPairi_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< int,int > >::size_type":
        return _calculix_pythoninterface.VectorPairi_capacity(self)
    __swig_destroy__ = _calculix_pythoninterface.delete_VectorPairi

# Register VectorPairi in _calculix_pythoninterface:
_calculix_pythoninterface.VectorPairi_swigregister(VectorPairi)

class CalculiXPythonInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _calculix_pythoninterface.CalculiXPythonInterface_swiginit(self, _calculix_pythoninterface.new_CalculiXPythonInterface())
    __swig_destroy__ = _calculix_pythoninterface.delete_CalculiXPythonInterface

    def help(self) -> "void":
        return _calculix_pythoninterface.CalculiXPythonInterface_help(self)

    def get_job_status(self, job_id: "int") -> "int":
        return _calculix_pythoninterface.CalculiXPythonInterface_get_job_status(self, job_id)

    def frd_get_result_block_types(self, job_id: "int") -> "std::vector< std::string,std::allocator< std::string > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_result_block_types(self, job_id)

    def frd_get_result_block_components(self, job_id: "int", result_block_type: "std::string") -> "std::vector< std::string,std::allocator< std::string > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_result_block_components(self, job_id, result_block_type)

    def frd_get_total_increments(self, job_id: "int") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_total_increments(self, job_id)

    def frd_get_time_from_total_increment(self, job_id: "int", total_increment: "int") -> "double":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_time_from_total_increment(self, job_id, total_increment)

    def frd_get_node_ids_between_values(self, job_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string", lower_value: "double", upper_value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_ids_between_values(self, job_id, total_increment, result_block_type, result_block_component, lower_value, upper_value)

    def frd_get_node_ids_smaller_value(self, job_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_ids_smaller_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_node_ids_greater_value(self, job_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_ids_greater_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_element_ids_between_values(self, job_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string", lower_value: "double", upper_value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_between_values(self, job_id, total_increment, result_block_type, result_block_component, lower_value, upper_value)

    def frd_get_element_ids_smaller_value(self, job_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_smaller_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_element_ids_greater_value(self, job_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_greater_value(self, job_id, total_increment, result_block_type, result_block_component, value)

    def frd_get_element_ids_over_limit(self, job_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string", limit: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_element_ids_over_limit(self, job_id, total_increment, result_block_type, result_block_component, limit)

    def frd_get_node_value(self, job_id: "int", node_id: "int", total_increment: "int", result_block_type: "std::string", result_block_component: "std::string") -> "double":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_value(self, job_id, node_id, total_increment, result_block_type, result_block_component)

    def frd_get_node_values(self, job_id: "int", node_id: "int", total_increment: "int", result_block_type: "std::string") -> "std::vector< double,std::allocator< double > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_frd_get_node_values(self, job_id, node_id, total_increment, result_block_type)

    def dat_get_result_block_types(self, job_id: "int") -> "std::vector< std::string,std::allocator< std::string > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_types(self, job_id)

    def dat_get_result_block_set(self, job_id: "int") -> "std::vector< std::string,std::allocator< std::string > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_set(self, job_id)

    def dat_get_result_block_components(self, job_id: "int", result_block_type: "std::string") -> "std::vector< std::string,std::allocator< std::string > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_components(self, job_id, result_block_type)

    def dat_get_result_block_times(self, job_id: "int", result_block_type: "std::string", result_block_set: "std::string") -> "std::vector< double,std::allocator< double > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_result_block_times(self, job_id, result_block_type, result_block_set)

    def dat_get_node_ids_between_values(self, job_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string", lower_value: "double", upper_value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_ids_between_values(self, job_id, time, result_block_type, result_block_set, result_block_component, lower_value, upper_value)

    def dat_get_node_ids_smaller_value(self, job_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_ids_smaller_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_node_ids_greater_value(self, job_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_ids_greater_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_element_ids_between_values(self, job_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string", lower_value: "double", upper_value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_between_values(self, job_id, time, result_block_type, result_block_set, result_block_component, lower_value, upper_value)

    def dat_get_element_ids_smaller_value(self, job_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_smaller_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_element_ids_greater_value(self, job_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string", value: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_greater_value(self, job_id, time, result_block_type, result_block_set, result_block_component, value)

    def dat_get_element_ids_over_limit(self, job_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string", limit: "double") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_ids_over_limit(self, job_id, time, result_block_type, result_block_set, result_block_component, limit)

    def dat_get_node_value(self, job_id: "int", node_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string") -> "double":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_value(self, job_id, node_id, time, result_block_type, result_block_set, result_block_component)

    def dat_get_node_values(self, job_id: "int", node_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string") -> "std::vector< double,std::allocator< double > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_node_values(self, job_id, node_id, time, result_block_type, result_block_set)

    def dat_get_element_values_for_component(self, job_id: "int", element_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string", result_block_component: "std::string") -> "std::vector< double,std::allocator< double > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_values_for_component(self, job_id, element_id, time, result_block_type, result_block_set, result_block_component)

    def dat_get_element_values(self, job_id: "int", element_id: "int", time: "double", result_block_type: "std::string", result_block_set: "std::string") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_element_values(self, job_id, element_id, time, result_block_type, result_block_set)

    def dat_get_buckle(self, job_id: "int") -> "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_dat_get_buckle(self, job_id)

    def loadstrajectory_get_node_ids(self, trajectory_id: "int") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_node_ids(self, trajectory_id)

    def loadstrajectory_get_edge_ids(self, trajectory_id: "int") -> "std::vector< int,std::allocator< int > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_edge_ids(self, trajectory_id)

    def loadstrajectory_get_hit_coordinates(self, trajectory_id: "int") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_hit_coordinates(self, trajectory_id)

    def loadstrajectory_get_face_ids(self, trajectory_id: "int") -> "std::vector< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >,std::allocator< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_face_ids(self, trajectory_id)

    def loadstrajectory_get_draw_face_ids(self, trajectory_id: "int") -> "std::vector< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >,std::allocator< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_draw_face_ids(self, trajectory_id)

    def loadstrajectory_get_times(self, trajectory_id: "int") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_times(self, trajectory_id)

    def loadstrajectory_get_radius(self, trajectory_id: "int") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_radius(self, trajectory_id)

    def loadstrajectory_get_magnitude(self, trajectory_id: "int") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _calculix_pythoninterface.CalculiXPythonInterface_loadstrajectory_get_magnitude(self, trajectory_id)
    ccx_iface = property(_calculix_pythoninterface.CalculiXPythonInterface_ccx_iface_get, _calculix_pythoninterface.CalculiXPythonInterface_ccx_iface_set)

# Register CalculiXPythonInterface in _calculix_pythoninterface:
_calculix_pythoninterface.CalculiXPythonInterface_swigregister(CalculiXPythonInterface)



